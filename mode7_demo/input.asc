// new module script
float current_speed;

float turn_speed = 1.4;
float max_speed_forward = 4.0;
float max_speed_forward_road = 4.0;
float max_speed_forward_dirt = 2.0;
float max_speed_backward = 2.0;

int timer;

struct Vec3 {
  float x, y, z;
};

// kart
Vec3 kart_position;
float kart_angle;

DynamicSprite* zones;
DrawingSurface* zones_ds;
int current_zone;
int zone_road = -1, zone_dirt = 41600, zone_wall = 21151;

float abs(float x) {
  if (x < 0.0) return -x;
  return x;
}

void game_start() {
  kart_position.x = 343.0;
  kart_position.y = 185.0;
  m7.AddObject(0, 0, 0.36, 18);
  
  int zones_slot = 23;
  
  // zone sprite
  zones = DynamicSprite.CreateFromExistingSprite(zones_slot);
  zones_ds = zones.GetDrawingSurface();
}

void input() {
  
  // steer kart
  float factor;
  float max_factor = 1.5;
  if (current_speed == 0.0) factor = 0.0;
  else factor = 0.9 * max_speed_forward / current_speed;
  if (factor > max_factor) factor = max_factor;
  if (factor < -max_factor) factor = -max_factor;
  if (IsKeyPressed(eKeyA)) kart_angle -= turn_speed * factor;
  if (IsKeyPressed(eKeyD)) kart_angle += turn_speed * factor;
  
  // move kart
  float sin = Maths.Sin(Maths.DegreesToRadians(kart_angle));
  float cos = Maths.Cos(Maths.DegreesToRadians(kart_angle));

  float target_speed = 0.0;
  if (IsKeyPressed(eKeyW) && !IsKeyPressed(eKeyS)) {
    target_speed = max_speed_forward;
  }
  if (IsKeyPressed(eKeyS) && !IsKeyPressed(eKeyW)) {
    if (current_speed <= 0.4) target_speed = -max_speed_backward;
  }
  current_speed += (target_speed - current_speed) * 0.05;
  if (current_speed > -0.1 && current_speed < 0.1) current_speed = 0.0;
  
  kart_position.x += current_speed * sin;
  kart_position.z -= current_speed * cos;
}


void processKart() {
  // zone
  int w = Game.SpriteWidth[zones.Graphic];
  int h = Game.SpriteHeight[zones.Graphic];
  int x = FloatToInt(kart_position.x, eRoundNearest) + w / 2;
  int y = FloatToInt(kart_position.z, eRoundNearest) + h / 2;
  current_zone = zone_road;
  if (x >= 0 && x < w && y >= 0 && y < h) current_zone = zones_ds.GetPixel(x, y);
  if (current_zone == zone_dirt) {
    max_speed_forward = max_speed_forward_dirt;
    if (current_speed != 0.0) {
      int step = FloatToInt(max_speed_forward / abs(current_speed), eRoundNearest) + 3;
      if (step != 0) kart_position.y = 0.5;
      else kart_position.y = 0.0;
    }
  }
  else {
    kart_position.y = 0.0;
    max_speed_forward = max_speed_forward_road;
  }
  
  m7.SetObj(0, kart_position.x, kart_position.y, kart_position.z);   
}  

void drawDirt()
{

      // dirt
      //if (obin == 0 && current_speed > 0.0 && current_zone == zone_dirt) ds.DrawImage(x2d - w/2, y2d - (h*8/10), 24, 0, w, h);  
}

void on_key_press(eKeyCode k) {
  m7.DebugKeyPress(k);
}

int k;
function repeatedly_execute() {  
  
  timer++;
  if (timer == 48) timer = 0;

  if(timer%3 == 0) {
    k++;
    if(k>20) k = 0;
    m7.SetGroundSprite(43+k);
  }

  input();
  
  processKart();
  
  m7.TargetCamera(kart_position.x, kart_position.y, kart_position.z, kart_angle);
  
  m7.UpdateObjects();
  m7.Draw();
  
  gScreen.BackgroundGraphic = m7.Screen.Graphic;
  
    //lblDebug.Text = String.Format("Camera height: %03d - angle: %03d - focal length: %d", FloatToInt(camera_position.y, eRoundNearest), FloatToInt(camera_angle.x, eRoundNearest), FloatToInt(camera_dist, eRoundNearest));
}
